// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
	Package grpc is a generated protocol buffer package.

	It is generated from these files:
		rpc.proto

	It has these top-level messages:
*/
package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import icehub "github.com/at15/go.ice/example/github/pkg/icehubpb"

import context "golang.org/x/net/context"
import grpc1 "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for IceHub service

type IceHubClient interface {
	Ping(ctx context.Context, in *icehub.Ping, opts ...grpc1.CallOption) (*icehub.Pong, error)
}

type iceHubClient struct {
	cc *grpc1.ClientConn
}

func NewIceHubClient(cc *grpc1.ClientConn) IceHubClient {
	return &iceHubClient{cc}
}

func (c *iceHubClient) Ping(ctx context.Context, in *icehub.Ping, opts ...grpc1.CallOption) (*icehub.Pong, error) {
	out := new(icehub.Pong)
	err := grpc1.Invoke(ctx, "/icehubrpc.IceHub/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IceHub service

type IceHubServer interface {
	Ping(context.Context, *icehub.Ping) (*icehub.Pong, error)
}

func RegisterIceHubServer(s *grpc1.Server, srv IceHubServer) {
	s.RegisterService(&_IceHub_serviceDesc, srv)
}

func _IceHub_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(icehub.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceHubServer).Ping(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icehubrpc.IceHub/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceHubServer).Ping(ctx, req.(*icehub.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _IceHub_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "icehubrpc.IceHub",
	HandlerType: (*IceHubServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _IceHub_Ping_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8d, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0x40, 0x5b, 0x28, 0x85, 0x16, 0xa7, 0x0e, 0x0e, 0x1d, 0x32, 0x88, 0xab, 0x39, 0x54, 0x5c,
	0x1d, 0x9c, 0x74, 0x73, 0x76, 0x6b, 0x42, 0xbc, 0x06, 0x6d, 0x73, 0xc4, 0x04, 0xf4, 0x0f, 0x3b,
	0xfa, 0x09, 0xda, 0x2f, 0x11, 0x93, 0x41, 0xb7, 0x7b, 0xdc, 0x7b, 0x77, 0x65, 0x61, 0x49, 0x72,
	0xb2, 0xc6, 0x99, 0xaa, 0xd0, 0x52, 0xb5, 0x5e, 0x58, 0x92, 0xf5, 0x02, 0xb5, 0x6b, 0xbd, 0xe0,
	0xd2, 0x74, 0x80, 0x06, 0x0d, 0x04, 0x43, 0xf8, 0x73, 0xa0, 0x00, 0x61, 0x8a, 0x65, 0xbd, 0xfd,
	0xd3, 0x1b, 0xb7, 0xdc, 0x00, 0x1a, 0xae, 0xa5, 0x02, 0x75, 0x6f, 0x3a, 0xba, 0x2a, 0x88, 0x6b,
	0xa0, 0x0b, 0x42, 0xfc, 0x41, 0x02, 0xdc, 0x83, 0xd4, 0x2d, 0xf6, 0x2b, 0x5e, 0xe6, 0x07, 0xa9,
	0xf6, 0x5e, 0x54, 0xf3, 0x32, 0x3b, 0xea, 0x1e, 0xab, 0x09, 0x8f, 0x22, 0xff, 0x52, 0xfd, 0x23,
	0xd3, 0xe3, 0x2c, 0xd9, 0x4d, 0x87, 0x37, 0x4b, 0x86, 0x91, 0xa5, 0xcf, 0x91, 0xa5, 0xaf, 0x91,
	0xa5, 0xa7, 0x0c, 0x2d, 0x49, 0x91, 0x87, 0x73, 0xeb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0x16, 0xb2, 0x16, 0xd5, 0x00, 0x00, 0x00,
}
